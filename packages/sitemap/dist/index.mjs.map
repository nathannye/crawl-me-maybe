{"version":3,"sources":["../src/robots.ts","../src/utils.ts","../src/index.ts"],"names":["outDir","path","fs"],"mappings":";;;;;;AAAO,IAAM,kBAAA,GAAqB,CAAA;AAAA;AAAA;AAAA;AAAA,CAAA;ACSlC,eAAsB,gBAAA,CACrB,MACA,IAAA,EACkB;AAClB,EAAA,IAAI;AACH,IAAA,MAAM,GAAA,GAAA,iBAAM,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY;AACnC,IAAA,IAAI,OAAA,GAAU,KAAA;AACd,IAAA,IAAI,OAAA,GAAU,KAAA;AAEd,IAAA,MAAM,KAAA,GAAgB,IAAA,CACpB,GAAA,CAAI,CAAC,CAAA,KAAM;AACX,MAAA,IAAI,MAAM,CAAA,UAAA,EAAa,CAAA,CAAE,GAAG,CAAA,eAAA,EAAkB,CAAA,CAAE,WAAW,GAAG,CAAA,UAAA,CAAA;AAC9D,MAAA,IAAI,EAAE,UAAA,EAAY;AACjB,QAAA,GAAA,IAAO,CAAA,YAAA,EAAe,EAAE,UAAU,CAAA,aAAA,CAAA;AAAA,MACnC;AACA,MAAA,IAAI,OAAO,CAAA,CAAE,QAAA,KAAa,QAAA,EAAU;AACnC,QAAA,GAAA,IAAO,CAAA,UAAA,EAAa,CAAA,CAAE,QAAA,CAAS,OAAA,CAAQ,CAAC,CAAC,CAAA,WAAA,CAAA;AAAA,MAC1C;AACA,MAAA,IAAI,CAAA,CAAE,WAAW,MAAA,EAAQ;AACxB,QAAA,OAAA,GAAU,IAAA;AACV,QAAA,KAAA,MAAW,GAAA,IAAO,EAAE,SAAA,EAAW;AAC9B,UAAA,GAAA,IAAO,2BAA2B,GAAG,CAAA,0BAAA,CAAA;AAAA,QACtC;AAAA,MACD;AACA,MAAA,IAAI,CAAA,CAAE,WAAW,MAAA,EAAQ;AACxB,QAAA,OAAA,GAAU,IAAA;AACV,QAAA,KAAA,MAAW,GAAA,IAAO,EAAE,SAAA,EAAW;AAC9B,UAAA,GAAA,IAAO,mCAAmC,GAAG,CAAA,kCAAA,CAAA;AAAA,QAC9C;AAAA,MACD;AACA,MAAA,GAAA,IAAO,QAAA;AACP,MAAA,OAAO,GAAA;AAAA,IACR,CAAC,CAAA,CACA,IAAA,CAAK,EAAE,CAAA;AACT,IAAA,MAAM,EAAA,GAAa;AAAA,MAClB,qDAAA;AAAA,MACA,UACG,+DAAA,GACA,IAAA;AAAA,MACH,UACG,+DAAA,GACA;AAAA,KACJ,CACE,MAAA,CAAO,OAAO,CAAA,CACd,KAAK,GAAG,CAAA;AACV,IAAA,IAAI,SAAA,GAAY,CAAA;AAAA,QAAA,EAAmD,EAAE,IAAI,KAAK,CAAA,SAAA,CAAA;AAC9E,IAAA,IAAI,MAAM,MAAA,EAAQ;AACjB,MAAA,IAAI;AACH,QAAA,MAAM,EAAE,MAAA,EAAO,GAAI,MAAM,OAAO,YAAY,CAAA;AAC5C,QAAA,SAAA,GAAY,OAAO,SAAS,CAAA;AAAA,MAC7B,SAAS,CAAA,EAAG;AACX,QAAA,MAAM,IAAI,KAAA;AAAA,UACT,oCAAoC,CAAA,YAAa,KAAA,GAAQ,EAAE,OAAA,GAAU,MAAA,CAAO,CAAC,CAAC,CAAA;AAAA,SAC/E;AAAA,MACD;AAAA,IACD;AACA,IAAA,OAAO,SAAA;AAAA,EACR,SAAS,GAAA,EAAK;AACb,IAAA,MAAM,IAAI,KAAA;AAAA,MACT,gCAAgC,GAAA,YAAe,KAAA,GAAQ,IAAI,OAAA,GAAU,MAAA,CAAO,GAAG,CAAC,CAAA;AAAA,KACjF;AAAA,EACD;AACD;AAMA,eAAsB,kBAAA,CACrB,KAAA,EACA,OAAA,EACA,IAAA,EACkB;AAClB,EAAA,IAAI;AACH,IAAA,MAAM,KAAA,GAAgB,KAAA,CACpB,GAAA,CAAI,CAAC,CAAA,KAAM,CAAA,cAAA,EAAiB,OAAO,CAAA,CAAA,EAAI,CAAC,CAAA,gBAAA,CAAkB,CAAA,CAC1D,IAAA,CAAK,EAAE,CAAA;AACT,IAAA,IAAI,SAAA,GAAY,CAAA;AAAA,kEAAA,EAA6G,KAAK,CAAA,eAAA,CAAA;AAClI,IAAA,IAAI,MAAM,MAAA,EAAQ;AACjB,MAAA,IAAI;AACH,QAAA,MAAM,EAAE,MAAA,EAAO,GAAI,MAAM,OAAO,YAAY,CAAA;AAC5C,QAAA,SAAA,GAAY,OAAO,SAAS,CAAA;AAAA,MAC7B,SAAS,CAAA,EAAG;AACX,QAAA,MAAM,IAAI,KAAA;AAAA,UACT,sCAAsC,CAAA,YAAa,KAAA,GAAQ,EAAE,OAAA,GAAU,MAAA,CAAO,CAAC,CAAC,CAAA;AAAA,SACjF;AAAA,MACD;AAAA,IACD;AACA,IAAA,OAAO,SAAA;AAAA,EACR,SAAS,GAAA,EAAK;AACb,IAAA,MAAM,IAAI,KAAA;AAAA,MACT,sCAAsC,GAAA,YAAe,KAAA,GAAQ,IAAI,OAAA,GAAU,MAAA,CAAO,GAAG,CAAC,CAAA;AAAA,KACvF;AAAA,EACD;AACD;AAKO,IAAM,UAAA,GAAa,CACzB,UAAA,EACA,QAAA,EACA,OAAA,KACU;AACV,EAAA,IAAI;AACH,IAAA,EAAA,CAAG,cAAc,IAAA,CAAK,IAAA,CAAK,UAAA,EAAY,QAAQ,GAAG,OAAO,CAAA;AAAA,EAC1D,SAAS,GAAA,EAAK;AACb,IAAA,MAAM,IAAI,KAAA;AAAA,MACT,CAAA,qBAAA,EAAwB,QAAQ,CAAA,IAAA,EAAO,UAAU,CAAA,EAAA,EAAK,GAAA,YAAe,KAAA,GAAQ,GAAA,CAAI,OAAA,GAAU,MAAA,CAAO,GAAG,CAAC,CAAA;AAAA,KACvG;AAAA,EACD;AACD,CAAA;;;AClHA,IAAM,cAAA,GAAgC;AAAA,EACrC,MAAA,EAAQ,sBAAA;AAAA,EACR,MAAA,EAAQ,MAAA;AAAA,EACR,mBAAA,EAAqB,KAAA;AAAA,EACrB,QAAA,EAAU,EAAE,KAAA,EAAO,YAAY,EAAC,EAAE;AAAA,EAClC,QAAQ,YAAY;AACrB,CAAA;AAEe,SAAR,mBAAA,CACN,SAAwB,cAAA,EACvB;AACD,EAAA,MAAM,SAAS,MAAA,EAAQ,MAAA;AACvB,EAAA,IAAI,CAAC,MAAA,EAAQ;AACZ,IAAA,OAAA,CAAQ,IAAI,8DAAoD,CAAA;AAChE,IAAA;AAAA,EACD;AAEA,EAAA,MAAM,MAAA,GAAS,QAAQ,MAAA,IAAU,MAAA;AACjC,EAAA,MAAM,MAAA,GAAS,CAAC,MAAA,EAAQ,mBAAA;AAMxB,EAAA,MAAM,YAAA,GAAe,OAAO,YAAA,GAAyB,CAAC,cAAc,CAAA,KAAM;AACzE,IAAA,IAAI,UAAA,GAAa,kBAAA;AACjB,IAAA,IAAI,MAAA,CAAO,MAAA,IAAU,OAAO,MAAA,CAAO,WAAW,UAAA,EAAY;AACzD,MAAA,IAAI;AACH,QAAA,MAAM,MAAA,GAAS,MAAM,MAAA,CAAO,MAAA,EAAO;AACnC,QAAA,IAAI,OAAO,WAAW,QAAA,EAAU;AAC/B,UAAA,UAAA,GAAa,MAAA;AAAA,QACd;AAAA,MACD,SAAS,GAAA,EAAK;AACb,QAAA,OAAA,CAAQ,IAAA,CAAK,6CAA6C,GAAG,CAAA;AAAA,MAC9D;AAAA,IACD;AACA,IAAA,IAAI,OAAA,GAAU,WAAW,IAAA,EAAK;AAC9B,IAAA,IAAI,CAAC,OAAA,CAAQ,QAAA,CAAS,IAAI,GAAG,OAAA,IAAW,IAAA;AAExC,IAAA,MAAM,SAAA,GAAY,OAAO,QAAA,CAAS,GAAG,IAAI,MAAA,CAAO,KAAA,CAAM,CAAA,EAAG,EAAE,CAAA,GAAI,MAAA;AAC/D,IAAA,KAAA,MAAW,OAAO,YAAA,EAAc;AAC/B,MAAA,OAAA,IAAW,CAAA,SAAA,EAAY,SAAS,CAAA,EAAG,GAAA,CAAI,UAAA,CAAW,GAAG,CAAA,GAAI,GAAA,GAAM,CAAA,EAAG,GAAG,CAAA,EAAG,GAAG,CAAA,CAAE;AAAA,CAAA;AAAA,IAC9E;AACA,IAAA,UAAA,CAAW,MAAA,EAAQ,cAAc,OAAO,CAAA;AAAA,EACzC,CAAA;AAEA,EAAA,MAAM,aAAA,GAAgB,OAAO,QAAA,EAAkB,IAAA,KAAyB;AACvE,IAAA,MAAM,MAAM,MAAM,gBAAA,CAAiB,IAAA,EAAM,EAAE,QAAQ,CAAA;AACnD,IAAA,UAAA,CAAW,MAAA,EAAQ,CAAA,EAAG,QAAQ,CAAA,IAAA,CAAA,EAAQ,GAAG,CAAA;AAAA,EAC1C,CAAA;AAEA,EAAA,OAAO;AAAA,IACN,IAAA,EAAM,qBAAA;AAAA,IACN,KAAA,EAAO,OAAA;AAAA,IACP,MAAM,WAAA,GAAc;AACnB,MAAA,MAAMA,OAAAA,GAASC,KAAK,OAAA,CAAQ,OAAA,CAAQ,KAAI,EAAG,MAAA,EAAQ,UAAU,MAAM,CAAA;AACnE,MAAAC,GAAG,SAAA,CAAUF,OAAAA,EAAQ,EAAE,SAAA,EAAW,MAAM,CAAA;AACxC,MAAA,MAAM,EAAE,UAAS,GAAI,MAAA;AAErB,MAAA,IAAI,OAAO,aAAa,UAAA,EAAY;AAEnC,QAAA,MAAM,IAAA,GAAO,MAAM,QAAA,EAAS;AAC5B,QAAA,MAAM,aAAA,CAAc,eAAe,IAAI,CAAA;AACvC,QAAA,MAAM,YAAA,CAAa,CAAC,cAAc,CAAC,CAAA;AACnC,QAAA,OAAA,CAAQ,IAAI,iCAA4B,CAAA;AACxC,QAAA;AAAA,MACD;AAGA,MAAA,MAAM,cAAwB,EAAC;AAC/B,MAAA,KAAA,MAAW,CAAC,IAAA,EAAM,EAAE,KAAK,MAAA,CAAO,OAAA,CAAQ,QAAQ,CAAA,EAAG;AAClD,QAAA,IAAI,OAAO,OAAO,UAAA,EAAY;AAC9B,QAAA,MAAM,IAAA,GAAO,MAAM,EAAA,EAAG;AACtB,QAAA,MAAM,aAAA,CAAc,CAAA,QAAA,EAAW,IAAI,CAAA,IAAA,CAAA,EAAQ,IAAI,CAAA;AAC/C,QAAA,WAAA,CAAY,IAAA,CAAK,CAAA,SAAA,EAAY,IAAI,CAAA,IAAA,CAAM,CAAA;AAAA,MACxC;AAEA,MAAA,MAAM,WAAW,MAAM,kBAAA;AAAA,QACtB,YAAY,GAAA,CAAI,CAAC,MAAc,CAAA,CAAE,KAAA,CAAM,CAAC,CAAC,CAAA;AAAA,QACzC,MAAA;AAAA,QACA,EAAE,MAAA;AAAO,OACV;AACA,MAAA,UAAA,CAAWA,OAAAA,EAAQ,eAAe,QAAQ,CAAA;AAC1C,MAAA,MAAM,YAAA,CAAa,CAAC,cAAA,EAAgB,GAAG,WAAW,CAAC,CAAA;AACnD,MAAA,OAAA,CAAQ,GAAA;AAAA,QACP,CAAA,iBAAA,EAAe,YAAY,MAAM,CAAA,8BAAA;AAAA,OAClC;AAAA,IACD;AAAA,GACD;AACD","file":"index.mjs","sourcesContent":["export const DEFAULT_ROBOTS_TXT = `User-agent: *\nAllow: /\nDisallow: /admin\nDisallow: /api/\n`;\n\n/**\n * Generates robots.txt string referencing sitemap.xml or custom sitemaps as needed.\n * @param indexUrl Fully-qualified URL for the produced sitemap.xml\n * @returns Standard robots.txt content\n */\nexport function createRobotsTxt(indexUrl: string): string {\n\tif (!indexUrl || typeof indexUrl !== \"string\") {\n\t\tthrow new Error(\"createRobotsTxt: indexUrl must be a non-empty string\");\n\t}\n\treturn `User-agent: *\\nAllow: /\\nDisallow: /admin\\nDisallow: /api/\\nSitemap: ${indexUrl}\\n`;\n}\n","import fs from \"node:fs\";\nimport path from \"node:path\";\nimport type { SitemapEntry } from \"./types\";\n\n/**\n * Generates a sitemap.xml string from a list of SitemapEntry objects.\n * Optionally minifies the output with minify-xml if opts.minify is true.\n * Throws an Error if minify or generation fails.\n */\nexport async function createSitemapXml(\n\turls: SitemapEntry[],\n\topts?: { minify?: boolean },\n): Promise<string> {\n\ttry {\n\t\tconst now = new Date().toISOString();\n\t\tlet imageNS = false;\n\t\tlet videoNS = false;\n\n\t\tconst items: string = urls\n\t\t\t.map((u) => {\n\t\t\t\tlet xml = `<url><loc>${u.url}</loc><lastmod>${u.lastmod ?? now}</lastmod>`;\n\t\t\t\tif (u.changefreq) {\n\t\t\t\t\txml += `<changefreq>${u.changefreq}</changefreq>`;\n\t\t\t\t}\n\t\t\t\tif (typeof u.priority === \"number\") {\n\t\t\t\t\txml += `<priority>${u.priority.toFixed(1)}</priority>`;\n\t\t\t\t}\n\t\t\t\tif (u.imageUrls?.length) {\n\t\t\t\t\timageNS = true;\n\t\t\t\t\tfor (const img of u.imageUrls) {\n\t\t\t\t\t\txml += `<image:image><image:loc>${img}</image:loc></image:image>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (u.videoUrls?.length) {\n\t\t\t\t\tvideoNS = true;\n\t\t\t\t\tfor (const vid of u.videoUrls) {\n\t\t\t\t\t\txml += `<video:video><video:content_loc>${vid}</video:content_loc></video:video>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\txml += \"</url>\";\n\t\t\t\treturn xml;\n\t\t\t})\n\t\t\t.join(\"\");\n\t\tconst ns: string = [\n\t\t\t'xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"',\n\t\t\timageNS\n\t\t\t\t? 'xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"'\n\t\t\t\t: null,\n\t\t\tvideoNS\n\t\t\t\t? 'xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\"'\n\t\t\t\t: null,\n\t\t]\n\t\t\t.filter(Boolean)\n\t\t\t.join(\" \");\n\t\tlet xmlString = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<urlset ${ns}>${items}</urlset>`;\n\t\tif (opts?.minify) {\n\t\t\ttry {\n\t\t\t\tconst { minify } = await import(\"minify-xml\");\n\t\t\t\txmlString = minify(xmlString);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Sitemap XML minification failed: ${e instanceof Error ? e.message : String(e)}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn xmlString;\n\t} catch (err) {\n\t\tthrow new Error(\n\t\t\t`Sitemap XML creation failed: ${err instanceof Error ? err.message : String(err)}`,\n\t\t);\n\t}\n}\n\n/**\n * Generates a sitemapindex XML string for an array of sitemap file urls.\n * Throws an Error if minify or generation fails.\n */\nexport async function createIndexSitemap(\n\tfiles: string[],\n\tbaseUrl: string,\n\topts?: { minify?: boolean },\n): Promise<string> {\n\ttry {\n\t\tconst items: string = files\n\t\t\t.map((f) => `<sitemap><loc>${baseUrl}/${f}</loc></sitemap>`)\n\t\t\t.join(\"\");\n\t\tlet xmlString = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">${items}</sitemapindex>`;\n\t\tif (opts?.minify) {\n\t\t\ttry {\n\t\t\t\tconst { minify } = await import(\"minify-xml\");\n\t\t\t\txmlString = minify(xmlString);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Sitemap index minification failed: ${e instanceof Error ? e.message : String(e)}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn xmlString;\n\t} catch (err) {\n\t\tthrow new Error(\n\t\t\t`Sitemap index XML creation failed: ${err instanceof Error ? err.message : String(err)}`,\n\t\t);\n\t}\n}\n\n/**\n * Writes a file to a directory, creating the full path if needed. Throws on failure.\n */\nexport const createFile = (\n\toutputPath: string,\n\tfilename: string,\n\tcontent: string,\n): void => {\n\ttry {\n\t\tfs.writeFileSync(path.join(outputPath, filename), content);\n\t} catch (err) {\n\t\tthrow new Error(\n\t\t\t`Failed to write file ${filename} to ${outputPath}: ${err instanceof Error ? err.message : String(err)}`,\n\t\t);\n\t}\n};\n","import fs from \"node:fs\";\nimport path from \"node:path\";\nimport { DEFAULT_ROBOTS_TXT } from \"./robots\";\nimport type { SitemapConfig, SitemapEntry } from \"./types\";\nimport { createFile, createIndexSitemap, createSitemapXml } from \"./utils\";\n\nconst DEFAULT_CONFIG: SitemapConfig = {\n\tdomain: \"https://yoursite.com\",\n\toutDir: \"dist\",\n\tdisableMinification: false,\n\tsitemaps: { pages: async () => [] },\n\trobots: async () => DEFAULT_ROBOTS_TXT,\n};\n\nexport default function crawlMeMaybeSitemap(\n\tconfig: SitemapConfig = DEFAULT_CONFIG,\n) {\n\tconst domain = config?.domain;\n\tif (!domain) {\n\t\tconsole.log(\"⚠️ No domain provided, skipping sitemap generation\");\n\t\treturn;\n\t}\n\n\tconst outDir = config?.outDir || \"dist\";\n\tconst minify = !config?.disableMinification;\n\n\t/**\n\t * Creates robots.txt handling custom async/user rules and always adds sitemaps at the end.\n\t * @param sitemapsUrls - array of string (relative to domain)\n\t */\n\tconst createRobots = async (sitemapsUrls: string[] = [\"/sitemap.xml\"]) => {\n\t\tlet userRobots = DEFAULT_ROBOTS_TXT;\n\t\tif (config.robots && typeof config.robots === \"function\") {\n\t\t\ttry {\n\t\t\t\tconst result = await config.robots();\n\t\t\t\tif (typeof result === \"string\") {\n\t\t\t\t\tuserRobots = result;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconsole.warn(\"[SEO] Error in user robots async callback\", err);\n\t\t\t}\n\t\t}\n\t\tlet content = userRobots.trim();\n\t\tif (!content.endsWith(\"\\n\")) content += \"\\n\";\n\t\t// Ensure no duplicate Sitemap: lines\n\t\tconst domainUrl = domain.endsWith(\"/\") ? domain.slice(0, -1) : domain;\n\t\tfor (const rel of sitemapsUrls) {\n\t\t\tcontent += `Sitemap: ${domainUrl}${rel.startsWith(\"/\") ? rel : `${\"/\"}${rel}`}\\n`;\n\t\t}\n\t\tcreateFile(outDir, \"robots.txt\", content);\n\t};\n\n\tconst createSitemap = async (filename: string, urls: SitemapEntry[]) => {\n\t\tconst xml = await createSitemapXml(urls, { minify });\n\t\tcreateFile(outDir, `${filename}.xml`, xml);\n\t};\n\n\treturn {\n\t\tname: \"vite-plugin-sitemap\",\n\t\tapply: \"build\",\n\t\tasync closeBundle() {\n\t\t\tconst outDir = path.resolve(process.cwd(), config?.outDir || \"dist\");\n\t\t\tfs.mkdirSync(outDir, { recursive: true });\n\t\t\tconst { sitemaps } = config;\n\n\t\t\tif (typeof sitemaps === \"function\") {\n\t\t\t\t// Single sitemap mode\n\t\t\t\tconst urls = await sitemaps();\n\t\t\t\tawait createSitemap(\"sitemap.xml\", urls);\n\t\t\t\tawait createRobots([\"/sitemap.xml\"]);\n\t\t\t\tconsole.log(\"✅ Generated single sitemap\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Multi-sitemap mode (object)\n\t\t\tconst allSitemaps: string[] = [];\n\t\t\tfor (const [name, cb] of Object.entries(sitemaps)) {\n\t\t\t\tif (typeof cb !== \"function\") continue;\n\t\t\t\tconst urls = await cb();\n\t\t\t\tawait createSitemap(`sitemap-${name}.xml`, urls);\n\t\t\t\tallSitemaps.push(`/sitemap-${name}.xml`);\n\t\t\t}\n\n\t\t\tconst indexXml = await createIndexSitemap(\n\t\t\t\tallSitemaps.map((s: string) => s.slice(1)),\n\t\t\t\tdomain,\n\t\t\t\t{ minify },\n\t\t\t);\n\t\t\tcreateFile(outDir, \"sitemap.xml\", indexXml);\n\t\t\tawait createRobots([\"/sitemap.xml\", ...allSitemaps]);\n\t\t\tconsole.log(\n\t\t\t\t`✅ Generated ${allSitemaps.length} sitemaps + index + robots.txt`,\n\t\t\t);\n\t\t},\n\t};\n}\n"]}
{"version":3,"sources":["../src/schema-markup/automap.ts","../src/schema-markup/schema-utils.ts","../src/schema-markup/builders/webpage.ts","../src/utils/meta-title.ts","../src/config.ts","../src/utils/sanity-image.ts","../src/utils/favicon.ts","../src/utils/merge.ts","../src/utils/image.ts","../src/schema-markup/builders/utils.ts","../src/schema-markup/builders/article.ts","../src/schema-markup/builders/product.ts","../src/schema-markup/builders/event.ts","../src/schema-markup/builders/faq.ts","../src/schema-markup/builders/website.ts","../src/schema-markup/builders/organization.ts","../src/schema-markup/builders/about-page.ts","../src/schema-markup/builders/contact-page.ts","../src/schema-markup/compose.ts","../src/build.ts"],"names":["config","buildSrc"],"mappings":"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","file":"index.js","sourcesContent":["import type { MergedMetadata } from \"~/utils/merge\";\n\n// field name you will use if auto is on\nconst fieldMappings = {\n\ttitle: \"title\",\n\tdescription: \"description\",\n\timage: \"metaImage\",\n\tdatePublished: \"_createdAt\",\n\tdateModified: \"_updatedAt\",\n};\n\ntype AutoMapSettings = {\n\ttitle?: boolean;\n\tdescription?: boolean;\n\timage?: boolean;\n\tdatePublished?: boolean;\n\tdateModified?: boolean;\n};\n\ntype AutoMapProperty = keyof AutoMapSettings;\n\ntype AutoMapValue = {\n\t[K in AutoMapProperty]: string | undefined;\n};\n\nconst shouldAutomap = (\n\tautomapSettings: AutoMapSettings,\n\tproperty: AutoMapProperty,\n) => {\n\treturn automapSettings[property] !== false;\n};\n\nexport const automap = (\n\tautomapSettings: AutoMapSettings,\n\tbaseSeoObject: MergedMetadata,\n\textra?: Record<string, unknown>,\n): AutoMapValue => {\n\tconst automappedValues = Object.keys(fieldMappings).reduce(\n\t\t(acc, key) => {\n\t\t\tif (shouldAutomap(automapSettings, key as AutoMapProperty)) {\n\t\t\t\tacc[key] =\n\t\t\t\t\tbaseSeoObject[fieldMappings[key]] ||\n\t\t\t\t\textra[fieldMappings[key] as keyof typeof extra];\n\t\t\t}\n\t\t\treturn acc;\n\t\t},\n\t\t{\n\t\t\ttitle: undefined,\n\t\t\tdescription: undefined,\n\t\t\timage: undefined,\n\t\t\tdatePublished: undefined,\n\t\t\tdateModified: undefined,\n\t\t},\n\t);\n\n\treturn automappedValues;\n};\n","export function coalesce<T>(\n\t...values: (T | undefined | null)[]\n): T | undefined {\n\tfor (const value of values) {\n\t\tif (value !== undefined && value !== null) return value;\n\t}\n\treturn undefined;\n}\n","// schema/builders/webpage.ts\nimport { createSchemaImageObject } from \"../../utils\";\nimport type { MergedMetadata } from \"../../utils/merge\";\nimport { automap } from \"../automap\";\nimport type { SchemaDefaults } from \"../compose\";\nimport { coalesce } from \"../schema-utils\";\nimport type { SchemaImage } from \"../types\";\n\nexport function buildWebPage({\n\tseo,\n\tschemaDefaults,\n\textra,\n}: {\n\tseo: MergedMetadata;\n\tschemaDefaults?: SchemaDefaults;\n\textra?: Record<string, unknown>;\n}): Record<string, unknown> {\n\tconst defaults = schemaDefaults?.webPage || {};\n\tconst autoMap = schemaDefaults?.autoMap || {};\n\n\tconst {title: name, description, image} = automap(autoMap, seo, extra);\n\n\t// Use auto-mapping if enabled\n\t// const name =\n\t// \tautoMap.title !== false ? seo.title : (extra?.name as string | undefined);\n\t// const description =\n\t// \tautoMap.description !== false\n\t// \t\t? seo.description\n\t// \t\t: (extra?.description as string | undefined);\n\n\t// const image = createSchemaImageObject(\n\t// \tautoMap.image !== false ? seo.metaImage : (extra?.image as SchemaImage),\n\t// \tschemaDefaults?.imageFallback,\n\t// );\n\n\treturn {\n\t\t\"@context\": \"https://schema.org\",\n\t\t\"@type\": \"WebPage\",\n\t\tname: coalesce(name, extra?.name),\n\t\tdescription: coalesce(description, extra?.description),\n\t\turl: coalesce(seo.canonicalUrl, extra?.url),\n\t\timage,\n\t\tinLanguage: coalesce(extra?.inLanguage, defaults.inLanguage),\n\t\tdatePublished: coalesce(extra?.datePublished, extra?._createdAt),\n\t\tdateModified: coalesce(extra?.dateModified, extra?._updatedAt),\n\t\tabout: extra?.about,\n\t\tisPartOf: seo.canonicalUrl\n\t\t\t? {\n\t\t\t\t\t\"@type\": \"WebSite\",\n\t\t\t\t\t\"@id\": `${seo.canonicalUrl}#website`,\n\t\t\t\t}\n\t\t\t: undefined,\n\t};\n}\n","export const createMetaTitle = (\n\tpageTitle = \"\",\n\tsiteTitle = \"\",\n\ttemplate = \"{pageTitle} | {siteTitle}\",\n) => {\n\tlet metaTitle = template\n\t\t.replace(\"{pageTitle}\", pageTitle)\n\t\t.replace(\"{siteTitle}\", siteTitle);\n\n\t// Remove leading/trailing separator if pageTitle or siteTitle is missing\n\tmetaTitle = metaTitle.replace(/\\s*\\|\\s*$/, \"\").replace(/^\\s*\\|\\s*/, \"\");\n\n\t// If result is empty, fallback to site or pageTitle or \"(Untitled)\"\n\tif (!metaTitle.trim()) {\n\t\tmetaTitle = siteTitle || pageTitle || \"\";\n\t}\n\n\treturn metaTitle;\n};\n","// packages/core/src/config.ts\nexport interface SanityWebConfig {\n\tprojectId?: string;\n\tdataset?: string;\n}\n\nlet config: SanityWebConfig = {};\n\n/** Initialize or override config */\nexport function setConfig(newConfig: SanityWebConfig) {\n\tconfig = { ...config, ...newConfig };\n}\n\n/** Read the active config anywhere */\nexport function getConfig(): SanityWebConfig {\n\treturn config;\n}\n","import { buildSrc } from \"@sanity-image/url-builder\";\nimport { getConfig } from \"~/config\";\n\n/**\n * Build a Sanity image URL with optional transformations\n */\n\nexport function urlFor(imageRef: string) {\n\tconst config = getConfig();\n\tconst baseUrl = `https://cdn.sanity.io/images/${config.projectId}/${config.dataset}/`;\n\n\tlet width: number | undefined;\n\tlet height: number | undefined;\n\tlet format: string | undefined;\n\tlet quality = 100;\n\n\tconst chain = {\n\t\tsize: (w: number, h: number) => {\n\t\t\twidth = w;\n\t\t\theight = h;\n\t\t\treturn chain;\n\t\t},\n\t\tformat: (fm: string) => {\n\t\t\tformat = fm;\n\t\t\treturn chain;\n\t\t},\n\t\tquality: (q: number) => {\n\t\t\tif (q) {\n\t\t\t\tquality = q;\n\t\t\t}\n\t\t\treturn chain;\n\t\t},\n\t\turl: () => {\n\t\t\tconst result = buildSrc({\n\t\t\t\tid: imageRef,\n\t\t\t\tbaseUrl,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tqueryParams: {\n\t\t\t\t\tfm: format as \"jpg\" | \"pjpg\" | \"png\" | \"webp\",\n\t\t\t\t\tq: quality,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn result?.src || \"\";\n\t\t},\n\t};\n\n\treturn chain;\n}\n","import type { SanityAssetDocument } from \"@sanity/client\";\nimport { urlFor } from \"./sanity-image\";\n\nexport type Favicon = {\n\ttype: string;\n\tsizes?: string;\n\thref: string;\n};\n\nexport const createFavicons = (\n\tfavicon: SanityAssetDocument | undefined,\n): Favicon[] | null => {\n\tif (!favicon?.asset) return null;\n\n\tconst favicons: Favicon[] = [];\n\tconst imageRef = favicon.asset._ref || favicon.asset._id;\n\tconst [assetType, id, dimensions, fileType] = imageRef.split(\"-\");\n\n\tif (fileType === \"svg\") {\n\t\tconst svg = urlFor(imageRef).url();\n\t\tconst pngFallback = urlFor(imageRef).size(32, 32).format(\"png\").url();\n\n\t\tfavicons.push(\n\t\t\t{\n\t\t\t\ttype: \"image/svg+xml\",\n\t\t\t\thref: svg,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"image/png\",\n\t\t\t\tsizes: \"32x32\",\n\t\t\t\thref: pngFallback,\n\t\t\t},\n\t\t);\n\t} else {\n\t\tconst png = urlFor(imageRef).size(32, 32).format(\"png\").url();\n\t\tfavicons.push({\n\t\t\ttype: \"image/png\",\n\t\t\tsizes: \"32x32\",\n\t\t\thref: png,\n\t\t});\n\t}\n\n\treturn favicons;\n};\n","import type { SanityImageAssetDocument } from \"@sanity/client\";\nimport { createFavicons, type Favicon } from \"./favicon\";\nimport { createMetaTitle } from \"./meta-title\";\n\n/**\n * Type for SEO defaults from seoDefaults singleton\n * Based on apps/cms/plugins/schema-markup/src/schemas/singleton/seo-defaults.ts\n */\nexport type SeoDefaults = {\n\tsiteTitle: string;\n\tpageTitleTemplate: string;\n\tmetaDescription?: string;\n\tsiteUrl: string;\n\tfavicon?: SanityImageAssetDocument;\n\ttwitterHandle?: string;\n};\n\n/**\n * Type for page-level metadata\n * Based on apps/cms/plugins/schema-markup/src/schemas/fields/metadata/page-metadata.ts\n */\n\ntype SanitySlug = { slug: { current?: string; fullUrl?: string } } | string;\n\n// This allows you to dynamically change the metadata field name on the page object\nexport type PageMetadata<MetaKey extends string = \"meta\"> = {\n\tschemaMarkup?: { type: string };\n\ttitle: string;\n} & {\n\t[metaKey in MetaKey]: {\n\t\tdescription?: string;\n\t\tcanonicalUrl?: string;\n\t\tmetaImage?: SanityImageAssetDocument;\n\t\tsearchVisibility?: {\n\t\t\tnoIndex?: boolean;\n\t\t\tnoFollow?: boolean;\n\t\t};\n\t};\n} & {\n\tslug: SanitySlug;\n\t_createdAt?: string;\n\t_updatedAt?: string;\n};\n\nexport type MergedMetadata = {\n\ttitle?: string;\n\tdescription?: string;\n\tcanonicalUrl?: string;\n\tmetaImage?: SanityImageAssetDocument;\n\tfavicons?: Favicon[] | null;\n\ttwitterHandle?: string;\n\trobots?: string;\n\tschemaMarkup?: string;\n\tsiteTitle?: string;\n};\n\nconst buildRobotsString = ({\n\tnoIndex = false,\n\tnoFollow = false,\n}: {\n\tnoIndex?: boolean;\n\tnoFollow?: boolean;\n}) => {\n\tconst parts = [];\n\n\tif (noIndex) parts.push(\"noindex\");\n\tif (noFollow) parts.push(\"nofollow\");\n\n\tif (parts.length === 0) return undefined;\n\n\treturn parts.join(\",\");\n};\n\n/**\n * Merges page-level metadata with SEO defaults,\n * Page metadata takes precedence over defaults\n *\n * The `seoObjectName` parameter tells us which key to look for on the page object.\n * Typescript cannot statically verify the key, so types are a little looser at this access.\n */\nexport const mergeSeoData = <MetaKey extends string = \"meta\">(\n\tpage?: PageMetadata<MetaKey>,\n\tseoDefaults?: SeoDefaults,\n\tseoObjectName: MetaKey = \"meta\" as MetaKey,\n): MergedMetadata => {\n\t// If no data available, return minimal metadata\n\tif (!page && !seoDefaults) {\n\t\tconsole.warn(\"mergeSeoData: No page or seoDefaults provided\");\n\t\treturn {\n\t\t\ttitle: undefined,\n\t\t\tdescription: undefined,\n\t\t};\n\t}\n\n\t// -------- Dynamic meta key extraction --------\n\tconst pageMeta = page?.[seoObjectName as keyof PageMetadata<MetaKey>];\n\tconst schemaMarkupType = page?.schemaMarkup?.type;\n\n\t// If only defaults available\n\tif (!page) {\n\t\tconsole.warn(\"mergeSeoData: No page data provided\");\n\t\treturn {\n\t\t\ttitle: seoDefaults?.siteTitle,\n\t\t\tdescription: seoDefaults?.metaDescription,\n\t\t\tcanonicalUrl: seoDefaults?.siteUrl,\n\t\t\tfavicons: createFavicons(seoDefaults?.favicon),\n\t\t\ttwitterHandle: seoDefaults?.twitterHandle,\n\t\t};\n\t}\n\n\t// If only page data available (no defaults)\n\tif (!seoDefaults) {\n\t\tconsole.warn(\"mergeSeoData: No seoDefaults provided\");\n\t\treturn {\n\t\t\ttitle: page.title,\n\t\t\tdescription: pageMeta?.description,\n\t\t\tcanonicalUrl: pageMeta?.canonicalUrl,\n\t\t\tschemaMarkup: schemaMarkupType,\n\t\t};\n\t}\n\n\t// Both page and defaults available - merge them\n\treturn {\n\t\t// Generate title using template\n\t\ttitle: createMetaTitle(\n\t\t\tpage.title,\n\t\t\tseoDefaults.siteTitle,\n\t\t\tseoDefaults.pageTitleTemplate,\n\t\t),\n\t\tsiteTitle: seoDefaults.siteTitle,\n\t\t// Page metadata overrides defaults\n\t\tdescription: pageMeta?.description || seoDefaults.metaDescription,\n\t\tcanonicalUrl: pageMeta?.canonicalUrl || seoDefaults.siteUrl,\n\t\tmetaImage: pageMeta?.metaImage,\n\t\tfavicons: createFavicons(seoDefaults.favicon),\n\t\ttwitterHandle: seoDefaults.twitterHandle,\n\t\trobots: buildRobotsString(\n\t\t\tpageMeta?.searchVisibility || { noIndex: false, noFollow: false },\n\t\t),\n\t\tschemaMarkup: schemaMarkupType,\n\t};\n};\n","import { urlFor } from \"~/utils/sanity-image\";\nimport type { SanityImageAssetDocument } from \"@sanity/client\";\nimport type { ImageObject } from \"schema-dts\";\n\nconst formatImageUrl = (\n\timageReference: string,\n): {\n\turl: string;\n\twidth: string;\n\theight: string;\n} | null => {\n\tif (!imageReference) return null;\n\n\tconst MAX_WIDTH = 2000;\n\tconst QUALITY = 85;\n\n\tconst parts = imageReference.split(\"-\");\n\tif (parts.length < 3) return null;\n\n\tconst [_, id, dimensions, _fileType] = parts;\n\tconst [width, height] = dimensions.split(\"x\").map(Number);\n\tconst aspectRatio = Number(width) / Number(height);\n\n\tlet w = width;\n\tlet h = height;\n\n\tconst shouldClamp = width > MAX_WIDTH;\n\tif (shouldClamp) {\n\t\tconst newWidth = Math.min(width, MAX_WIDTH);\n\t\tconst newHeight = Math.round(newWidth / aspectRatio);\n\n\t\tw = newWidth;\n\t\th = newHeight;\n\n\t\treturn {\n\t\t\turl: urlFor(imageReference)\n\t\t\t\t.size(newWidth, newHeight)\n\t\t\t\t.quality(QUALITY)\n\t\t\t\t.url(),\n\t\t\twidth: String(newWidth),\n\t\t\theight: String(newHeight),\n\t\t};\n\t}\n\n\treturn {\n\t\turl: urlFor(imageReference).quality(QUALITY).url(),\n\t\twidth: String(w),\n\t\theight: String(h),\n\t};\n};\n\nexport function createSchemaImageObject(\n\timage?: SanityImageAssetDocument,\n\tfallback?: SanityImageAssetDocument,\n): ImageObject | undefined {\n\tif (!image && !fallback) return undefined;\n\tconst imageToUse = image || fallback;\n\n\tconst isDereferencedImage =\n\t\ttypeof imageToUse === \"object\" && \"asset\" in imageToUse && imageToUse.asset;\n\tconst reference = isDereferencedImage\n\t\t? imageToUse.asset?._id\n\t\t: imageToUse?.asset?._ref;\n\n\tconst imageData = formatImageUrl(reference || \"\");\n\tif (!imageData) return undefined;\n\n\treturn {\n\t\t\"@type\": \"ImageObject\",\n\t\turl: imageData.url,\n\t\twidth: imageData.width,\n\t\theight: imageData.height,\n\t};\n}\n","// schema/builders/utils.ts\nimport type { SanityImageAssetDocument } from \"@sanity/client\";\nimport type { SchemaImage, SchemaPerson, SchemaOrganization } from \"../types\";\nimport { createSchemaImageObject } from \"../../utils/image\";\nimport type { ImageObject } from \"schema-dts\";\n\n/**\n * Normalize a name to create a valid @id\n */\nexport function normalizeId(name: string): string {\n\treturn name\n\t\t.toLowerCase()\n\t\t.replace(/[^a-z0-9]+/g, \"-\")\n\t\t.replace(/^-|-$/g, \"\");\n}\n\n/**\n * Helper to build Person schema or return reference if @id exists\n */\nexport function buildPersonSchema(\n\tperson: SchemaPerson | undefined,\n\tasReference = false,\n\tbaseUrl?: string,\n): Record<string, unknown> | undefined {\n\tif (!person) return undefined;\n\n\t// Generate full URL for @id\n\tconst base = baseUrl || \"\";\n\tconst id = person[\"@id\"]\n\t\t? person[\"@id\"].startsWith(\"http\")\n\t\t\t? person[\"@id\"]\n\t\t\t: `${base}${person[\"@id\"]}`\n\t\t: `${base}#person-${normalizeId(person.name)}`;\n\n\t// If requesting as reference, return just the reference\n\tif (asReference) {\n\t\treturn { \"@id\": id };\n\t}\n\n\treturn {\n\t\t\"@type\": \"Person\",\n\t\t\"@id\": id,\n\t\tname: person.name,\n\t\turl: person.url,\n\t\tsameAs: person.sameAs,\n\t\tjobTitle: person.jobTitle,\n\t\timage: createSchemaImageObject(person.image),\n\t};\n}\n\n/**\n * Helper to build Organization schema or return reference if @id exists\n */\nexport function buildOrgSchema(\n\torg: SchemaOrganization | undefined,\n\tasReference = false,\n\tbaseUrl?: string,\n): Record<string, unknown> | undefined {\n\tif (!org) return undefined;\n\n\t// Generate full URL for @id\n\tconst base = baseUrl || org.url || \"\";\n\tconst id = org[\"@id\"]\n\t\t? org[\"@id\"].startsWith(\"http\")\n\t\t\t? org[\"@id\"]\n\t\t\t: `${base}${org[\"@id\"]}`\n\t\t: `${base}#organization-${normalizeId(org.name)}`;\n\n\t// If requesting as reference, return just the reference\n\tif (asReference) {\n\t\treturn { \"@id\": id };\n\t}\n\n\t// Build department references (they'll be added as entities separately)\n\tconst departments = org.department\n\t\t? org.department\n\t\t\t\t.map((dept) => buildOrgSchema(dept, true, baseUrl))\n\t\t\t\t.filter(Boolean)\n\t\t: undefined;\n\n\t// Build contact points\n\tconst contactPoint = org.contactPoint\n\t\t? org.contactPoint.map((cp) => ({\n\t\t\t\t\"@type\": \"ContactPoint\",\n\t\t\t\tcontactType: cp.contactType,\n\t\t\t\ttelephone: cp.telephone,\n\t\t\t\temail: cp.email,\n\t\t\t\turl: cp.url,\n\t\t\t\tareaServed: cp.areaServed,\n\t\t\t\tavailableLanguage: cp.availableLanguage,\n\t\t\t}))\n\t\t: undefined;\n\n\treturn {\n\t\t\"@type\": \"Organization\",\n\t\t\"@id\": id,\n\t\tname: org.name,\n\t\turl: org.url,\n\t\tlogo: createSchemaImageObject(org.logo), // Logo should be provided or defaults applied upstream\n\t\tsameAs: org.sameAs,\n\t\tdepartment: departments,\n\t\tcontactPoint,\n\t};\n}\n\n/**\n * Helper to build Person or Organization schema\n * Detects type based on jobTitle presence (Person) or defaults to Organization\n */\nexport function buildPersonOrOrg(\n\tentity: SchemaPerson | SchemaOrganization,\n\tasReference = false,\n\tbaseUrl?: string,\n): Record<string, unknown> | undefined {\n\tif (!entity) return undefined;\n\n\t// Detect if it's a Person (has jobTitle) or Organization\n\tif (\"jobTitle\" in entity || !(\"logo\" in entity)) {\n\t\treturn buildPersonSchema(entity as SchemaPerson, asReference, baseUrl);\n\t}\n\n\treturn buildOrgSchema(entity as SchemaOrganization, asReference, baseUrl);\n}\n\n/**\n * Helper to format date for schema.org\n */\nexport function formatSchemaDate(\n\tdate?: string | Date | undefined,\n): string | Date | undefined {\n\tif (!date) return undefined;\n\n\tif (typeof date === \"string\") {\n\t\treturn date;\n\t}\n\n\treturn date.toISOString();\n}\n","// schema/builders/article.ts\nimport { createSchemaImageObject } from \"../../utils\";\nimport type { MergedMetadata } from \"../../utils/merge\";\nimport type { SchemaDefaults } from \"../compose\";\nimport type { SchemaImage, SchemaPerson, SchemaOrganization } from \"../types\";\nimport { buildPersonOrOrg, buildOrgSchema, formatSchemaDate } from \"./utils\";\nimport { coalesce } from \"../schema-utils\";\n\nexport function buildArticle({\n\tseo,\n\tschemaDefaults,\n\textra,\n}: {\n\tseo: MergedMetadata;\n\tschemaDefaults?: SchemaDefaults;\n\textra?: Record<string, unknown>;\n}): Record<string, unknown> {\n\tconst defaults = schemaDefaults?.article || {};\n\tconst autoMap = schemaDefaults?.autoMap || {};\n\n\t// Use auto-mapping if enabled\n\tconst headline =\n\t\tautoMap.title !== false\n\t\t\t? seo.title\n\t\t\t: (extra?.headline as string | undefined);\n\tconst description =\n\t\tautoMap.description !== false\n\t\t\t? seo.description\n\t\t\t: (extra?.description as string | undefined);\n\tconst image = createSchemaImageObject(\n\t\tautoMap.image !== false ? seo.metaImage : (extra?.image as SchemaImage),\n\t\tschemaDefaults?.imageFallback,\n\t);\n\n\t// Build author array (use references since they're added as entities first)\n\tconst authors = (extra?.author || []) as Array<\n\t\tSchemaPerson | SchemaOrganization\n\t>;\n\tconst authorSchema =\n\t\tautoMap.authors !== false && authors.length > 0\n\t\t\t? authors\n\t\t\t\t\t.map((author) => buildPersonOrOrg(author, true, seo.canonicalUrl))\n\t\t\t\t\t.filter(Boolean)\n\t\t\t: undefined;\n\n\t// Build publisher (use reference since it's added as entity first)\n\tconst publisher = coalesce(\n\t\textra?.publisher,\n\t\tdefaults.publisher,\n\t\tschemaDefaults?.publisher,\n\t\tschemaDefaults?.organization,\n\t) as SchemaOrganization | undefined;\n\n\treturn {\n\t\t\"@context\": \"https://schema.org\",\n\t\t\"@type\": \"Article\",\n\t\theadline: coalesce(headline, extra?.headline),\n\t\tdescription: coalesce(description, extra?.description),\n\t\timage,\n\t\tdatePublished: formatSchemaDate(\n\t\t\tautoMap.dates !== false\n\t\t\t\t? ((extra?._createdAt || extra?.datePublished) as\n\t\t\t\t\t\t| string\n\t\t\t\t\t\t| Date\n\t\t\t\t\t\t| undefined)\n\t\t\t\t: (extra?.datePublished as string | Date | undefined),\n\t\t),\n\t\tdateModified: formatSchemaDate(\n\t\t\tautoMap.dates !== false\n\t\t\t\t? ((extra?._updatedAt || extra?.dateModified) as\n\t\t\t\t\t\t| string\n\t\t\t\t\t\t| Date\n\t\t\t\t\t\t| undefined)\n\t\t\t\t: (extra?.dateModified as string | Date | undefined),\n\t\t),\n\t\tauthor: authorSchema,\n\t\tpublisher: buildOrgSchema(publisher, true, seo.canonicalUrl), // Use reference\n\t\tmainEntityOfPage: coalesce(seo.canonicalUrl, extra?.mainEntityOfPage) as\n\t\t\t| string\n\t\t\t| undefined,\n\t\tarticleSection: coalesce(extra?.articleSection, defaults.section),\n\t\turl: coalesce(seo.canonicalUrl, extra?.url) as string | undefined,\n\t\tisPartOf: seo.canonicalUrl\n\t\t\t? {\n\t\t\t\t\t\"@type\": \"WebSite\",\n\t\t\t\t\t\"@id\": `${seo.canonicalUrl}#website`,\n\t\t\t\t}\n\t\t\t: undefined,\n\t};\n}\n","// schema/builders/product.ts\nimport { createSchemaImageObject } from \"../../utils\";\nimport type { MergedMetadata } from \"../../utils/merge\";\nimport type { SchemaDefaults } from \"../compose\";\nimport type { SchemaImage } from \"../types\";\nimport { buildOrgSchema } from \"./utils\";\n\nexport function buildProduct({\n\tseo,\n\tschemaDefaults,\n\textra,\n}: {\n\tseo: MergedMetadata;\n\tschemaDefaults?: SchemaDefaults;\n\textra?: Record<string, unknown>;\n}): Record<string, unknown> {\n\tconst defaults = schemaDefaults?.product || {};\n\tconst autoMap = schemaDefaults?.autoMap || {};\n\n\t// Use auto-mapping if enabled\n\tconst name =\n\t\tautoMap.title !== false ? seo.title : (extra?.name as string | undefined);\n\tconst description =\n\t\tautoMap.description !== false\n\t\t\t? seo.description\n\t\t\t: (extra?.description as string | undefined);\n\tconst image = createSchemaImageObject(\n\t\tautoMap.image !== false ? seo.metaImage : (extra?.image as SchemaImage),\n\t\tschemaDefaults?.imageFallback,\n\t);\n\n\t// Build brand (use reference since it's added as entity first)\n\tconst brand = extra?.brand || defaults.brand;\n\n\t// Build offers\n\tconst offers =\n\t\textra?.offers ||\n\t\t(extra?.price\n\t\t\t? {\n\t\t\t\t\t\"@type\": \"Offer\",\n\t\t\t\t\tprice: extra.price,\n\t\t\t\t\tpriceCurrency: extra.priceCurrency || defaults.priceCurrency || \"USD\",\n\t\t\t\t\tavailability: `https://schema.org/${extra.availability || defaults.availability || \"InStock\"}`,\n\t\t\t\t\turl: seo.canonicalUrl,\n\t\t\t\t}\n\t\t\t: undefined);\n\n\treturn {\n\t\t\"@context\": \"https://schema.org\",\n\t\t\"@type\": \"Product\",\n\t\tname: name || (extra?.name as string | undefined),\n\t\tdescription: description || (extra?.description as string | undefined),\n\t\timage,\n\t\tbrand: brand\n\t\t\t? buildOrgSchema(brand as any, true, seo.canonicalUrl)\n\t\t\t: undefined, // Use reference\n\t\tsku: extra?.sku as string | undefined,\n\t\tmpn: extra?.mpn as string | undefined,\n\t\tgtin: extra?.gtin as string | undefined,\n\t\toffers,\n\t\taggregateRating: extra?.aggregateRating,\n\t\treview: extra?.review,\n\t\turl: seo.canonicalUrl,\n\t};\n}\n","import { createSchemaImageObject } from \"../../utils\";\nimport type { MergedMetadata } from \"../../utils/merge\";\nimport type { SchemaDefaults } from \"../compose\";\nimport { coalesce } from \"../schema-utils\";\nimport type {\n\tSchemaImage,\n\tSchemaPerson,\n\tSchemaOrganization,\n\tSchemaLocation,\n} from \"../types\";\nimport { buildPersonOrOrg, formatSchemaDate } from \"./utils\";\n\nexport function buildEvent({\n\tseo,\n\tschemaDefaults,\n\textra,\n}: {\n\tseo: MergedMetadata;\n\tschemaDefaults?: SchemaDefaults;\n\textra?: Record<string, unknown>;\n}): Record<string, unknown> {\n\tconst defaults = schemaDefaults?.event || {};\n\tconst autoMap = schemaDefaults?.autoMap || {};\n\n\t// Use auto-mapping if enabled\n\tconst name =\n\t\tautoMap.title !== false ? seo.title : (extra?.name as string | undefined);\n\tconst description =\n\t\tautoMap.description !== false\n\t\t\t? seo.description\n\t\t\t: (extra?.description as string | undefined);\n\tconst image = createSchemaImageObject(\n\t\tautoMap.image !== false ? seo.metaImage : (extra?.image as SchemaImage),\n\t\tschemaDefaults?.imageFallback,\n\t);\n\n\t// Build location\n\tconst locationData = extra?.location as SchemaLocation | undefined;\n\tconst location = locationData\n\t\t? {\n\t\t\t\t\"@type\": locationData.url ? \"VirtualLocation\" : \"Place\",\n\t\t\t\tname: locationData.name,\n\t\t\t\turl: locationData.url,\n\t\t\t\taddress: locationData.address,\n\t\t\t\tgeo: locationData.geo\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t\"@type\": \"GeoCoordinates\",\n\t\t\t\t\t\t\tlatitude: locationData.geo.latitude,\n\t\t\t\t\t\t\tlongitude: locationData.geo.longitude,\n\t\t\t\t\t\t}\n\t\t\t\t\t: undefined,\n\t\t\t}\n\t\t: undefined;\n\n\t// Build organizer (use references since they're added as entities first)\n\tconst organizer = coalesce(\n\t\textra?.organizer,\n\t\tdefaults.organizer,\n\t\tschemaDefaults?.organization,\n\t) as SchemaOrganization | SchemaPerson | undefined;\n\n\tconst organizerSchema = Array.isArray(organizer)\n\t\t? (organizer as Array<SchemaPerson | SchemaOrganization>)\n\t\t\t\t.map((org) => buildPersonOrOrg(org, true, seo.canonicalUrl))\n\t\t\t\t.filter(Boolean)\n\t\t: buildPersonOrOrg(\n\t\t\t\torganizer as SchemaPerson | SchemaOrganization,\n\t\t\t\ttrue,\n\t\t\t\tseo.canonicalUrl,\n\t\t\t);\n\n\t// Build performer (use references since they're added as entities first)\n\tconst performer = extra?.performer\n\t\t? (extra.performer as Array<SchemaPerson | SchemaOrganization>)\n\t\t\t\t.map((perf) => buildPersonOrOrg(perf, true, seo.canonicalUrl))\n\t\t\t\t.filter(Boolean)\n\t\t: undefined;\n\n\treturn {\n\t\t\"@context\": \"https://schema.org\",\n\t\t\"@type\": \"Event\",\n\t\tname: coalesce(name, extra?.name),\n\t\tdescription: coalesce(description, extra?.description),\n\t\timage,\n\t\tstartDate: formatSchemaDate(extra?.startDate as string | Date | undefined),\n\t\tendDate: formatSchemaDate(extra?.endDate as string | Date | undefined),\n\t\teventStatus: extra?.eventStatus\n\t\t\t? `https://schema.org/${extra.eventStatus}`\n\t\t\t: undefined,\n\t\teventAttendanceMode: coalesce(\n\t\t\textra?.eventAttendanceMode,\n\t\t\tdefaults.eventAttendanceMode,\n\t\t)\n\t\t\t? `https://schema.org/${(extra?.eventAttendanceMode || defaults.eventAttendanceMode) as string}`\n\t\t\t: undefined,\n\t\tlocation,\n\t\torganizer: organizerSchema,\n\t\tperformer,\n\t\toffers: extra?.offers,\n\t\turl: seo.canonicalUrl,\n\t};\n}\n","// schema/builders/faq.ts\nimport type { MergedMetadata } from \"../../utils/merge\";\nimport type { SchemaDefaults } from \"../compose\";\nimport type { SchemaFAQItem } from \"../types\";\n\nexport function buildFAQPage({\n\tseo,\n\tschemaDefaults,\n\textra,\n}: {\n\tseo: MergedMetadata;\n\tschemaDefaults?: SchemaDefaults;\n\textra?: Record<string, unknown>;\n}): Record<string, unknown> {\n\tconst autoMap = schemaDefaults?.autoMap || {};\n\n\t// Use auto-mapping if enabled\n\tconst name = autoMap.title !== false ? seo.title : extra?.name;\n\tconst description =\n\t\tautoMap.description !== false ? seo.description : extra?.description;\n\n\t// Build mainEntity (FAQ items)\n\tconst mainEntity = extra?.mainEntity\n\t\t? (extra.mainEntity as SchemaFAQItem[]).map((item: SchemaFAQItem) => ({\n\t\t\t\t\"@type\": \"Question\",\n\t\t\t\tname: item.question,\n\t\t\t\tacceptedAnswer: {\n\t\t\t\t\t\"@type\": \"Answer\",\n\t\t\t\t\ttext: item.answer,\n\t\t\t\t},\n\t\t\t}))\n\t\t: [];\n\n\treturn {\n\t\t\"@context\": \"https://schema.org\",\n\t\t\"@type\": \"FAQPage\",\n\t\tname,\n\t\tdescription,\n\t\tmainEntity,\n\t\turl: seo.canonicalUrl,\n\t\tisPartOf: seo.canonicalUrl\n\t\t\t? {\n\t\t\t\t\t\"@type\": \"WebSite\",\n\t\t\t\t\t\"@id\": `${seo.canonicalUrl}#website`,\n\t\t\t\t}\n\t\t\t: undefined,\n\t};\n}\n","// schema/builders/website.ts\nimport type { SchemaOrganization, SchemaSearchAction } from \"../types\";\nimport { buildOrgSchema } from \"./utils\";\n\nexport function buildWebSite({\n\tname,\n\turl,\n\tpublisher,\n\tsearchAction,\n\tinLanguage,\n}: {\n\tname?: string;\n\turl?: string;\n\tpublisher?: SchemaOrganization;\n\tsearchAction?: SchemaSearchAction;\n\tinLanguage?: string;\n}): Record<string, unknown> {\n\treturn {\n\t\t\"@context\": \"https://schema.org\",\n\t\t\"@type\": \"WebSite\",\n\t\t\"@id\": url ? `${url}#website` : undefined,\n\t\tname,\n\t\turl,\n\t\tpublisher: buildOrgSchema(publisher, true, url), // Use reference since it's added as entity first\n\t\tinLanguage,\n\t\tpotentialAction: searchAction?.target\n\t\t\t? {\n\t\t\t\t\t\"@type\": \"SearchAction\",\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\"@type\": \"EntryPoint\",\n\t\t\t\t\t\turlTemplate: searchAction.target,\n\t\t\t\t\t},\n\t\t\t\t\t\"query-input\":\n\t\t\t\t\t\tsearchAction.queryInput || \"required name=search_term_string\",\n\t\t\t\t}\n\t\t\t: undefined,\n\t};\n}\n","// schema/builders/organization.ts\nimport { createSchemaImageObject } from \"../../utils\";\nimport type { SchemaDefaults } from \"../compose\";\nimport { coalesce } from \"../schema-utils\";\nimport type { SchemaOrganization } from \"../types\";\nimport { normalizeId, buildOrgSchema } from \"./utils\";\n\nexport function buildOrganization(\n\torganization: SchemaOrganization,\n\tschemaDefaults?: SchemaDefaults,\n\tbaseUrl?: string,\n\tasReference = false,\n): Record<string, unknown> {\n\t// Generate full URL for @id\n\tconst base = baseUrl || organization.url || \"\";\n\tconst id = organization[\"@id\"]\n\t\t? organization[\"@id\"].startsWith(\"http\")\n\t\t\t? organization[\"@id\"]\n\t\t\t: `${base}${organization[\"@id\"]}`\n\t\t: `${base}#organization-${normalizeId(organization.name)}`;\n\n\t// If requesting as reference, return just the reference\n\tif (asReference) {\n\t\treturn { \"@id\": id };\n\t}\n\n\t// Build department references (they'll be added as entities separately)\n\tconst departments = organization.department\n\t\t? organization.department\n\t\t\t\t.map((dept) => buildOrgSchema(dept, true, baseUrl))\n\t\t\t\t.filter(Boolean)\n\t\t: undefined;\n\n\t// Build contact points\n\tconst contactPoint = organization.contactPoint\n\t\t? organization.contactPoint.map((cp) => ({\n\t\t\t\t\"@type\": \"ContactPoint\",\n\t\t\t\tcontactType: cp.contactType,\n\t\t\t\ttelephone: cp.telephone,\n\t\t\t\temail: cp.email,\n\t\t\t\turl: cp.url,\n\t\t\t\tareaServed: cp.areaServed,\n\t\t\t\tavailableLanguage: cp.availableLanguage,\n\t\t\t}))\n\t\t: undefined;\n\n\treturn {\n\t\t\"@context\": \"https://schema.org\",\n\t\t\"@type\": \"Organization\",\n\t\t\"@id\": id,\n\t\tname: organization.name,\n\t\turl: organization.url,\n\t\tlogo: createSchemaImageObject(\n\t\t\torganization.logo,\n\t\t\tcoalesce(schemaDefaults?.logo, schemaDefaults?.imageFallback),\n\t\t),\n\t\tsameAs: coalesce(organization.sameAs, schemaDefaults?.sameAs),\n\t\tdepartment: departments,\n\t\tcontactPoint,\n\t};\n}\n","// schema/builders/about-page.ts\nimport { createSchemaImageObject } from \"../../utils\";\nimport type { MergedMetadata } from \"../../utils/merge\";\nimport { automap } from \"../automap\";\nimport type { SchemaDefaults } from \"../compose\";\nimport { coalesce } from \"../schema-utils\";\nimport type { SchemaImage } from \"../types\";\n\nexport function buildAboutPage({\n\tseo,\n\tschemaDefaults,\n\textra,\n}: {\n\tseo: MergedMetadata;\n\tschemaDefaults?: SchemaDefaults;\n\textra?: Record<string, unknown>;\n}): Record<string, unknown> {\n\tconst defaults = schemaDefaults?.webPage || {};\n\tconst autoMap = schemaDefaults?.autoMap || {};\n\n\tconst { title, description, image, dateModified, datePublished } = automap(\n\t\tautoMap,\n\t\tseo,\n\t\textra,\n\t);\n\n\t// Use auto-mapping if enabled\n\t// const name =\n\t// \tautoMap.title !== false ? seo.title : (extra?.name as string | undefined);\n\t// const description =\n\t// \tautoMap.description !== false\n\t// \t\t? seo.description\n\t// \t\t: (extra?.description as string | undefined);\n\t// const image = createSchemaImageObject(\n\t// \tautoMap.image !== false ? seo.metaImage : (extra?.image as SchemaImage),\n\t// \tschemaDefaults?.imageFallback,\n\t// );\n\n\treturn {\n\t\t\"@context\": \"https://schema.org\",\n\t\t\"@type\": \"AboutPage\",\n\t\t// name: name || (extra?.name as string | undefined),\n\t\tname: title,\n\t\tdescription: coalesce(description, extra?.description),\n\t\turl: coalesce(seo.canonicalUrl, extra?.url) as string | undefined,\n\t\timage,\n\t\tinLanguage: coalesce(extra?.inLanguage, defaults.inLanguage),\n\t\tdatePublished: coalesce(extra?.datePublished, extra?._createdAt),\n\t\tdateModified: coalesce(extra?.dateModified, extra?._updatedAt),\n\t\tabout: extra?.about,\n\t\tisPartOf: seo.canonicalUrl\n\t\t\t? {\n\t\t\t\t\t\"@type\": \"WebSite\",\n\t\t\t\t\t\"@id\": `${seo.canonicalUrl}#website`,\n\t\t\t\t}\n\t\t\t: undefined,\n\t};\n}\n","// schema/builders/contact-page.ts\nimport { createSchemaImageObject } from \"../../utils\";\nimport type { MergedMetadata } from \"../../utils/merge\";\nimport { automap } from \"../automap\";\nimport type { SchemaDefaults } from \"../compose\";\nimport { coalesce } from \"../schema-utils\";\nimport type { SchemaImage } from \"../types\";\n\nexport function buildContactPage({\n\tseo,\n\tschemaDefaults,\n\textra,\n}: {\n\tseo: MergedMetadata;\n\tschemaDefaults?: SchemaDefaults;\n\textra?: Record<string, unknown>;\n}): Record<string, unknown> {\n\tconst defaults = schemaDefaults?.webPage || {};\n\tconst autoMap = schemaDefaults?.autoMap || {};\n\n\t// Use auto-mapping if enabled\n\t// const name =\n\t// \tautoMap.title !== false ? seo.title : (extra?.name as string | undefined);\n\t// const description =\n\t// \tautoMap.description !== false\n\t// \t\t? seo.description\n\t// \t\t: (extra?.description as string | undefined);\n\t// const image = createSchemaImageObject(\n\t// \tautoMap.image !== false ? seo.metaImage : (extra?.image as SchemaImage),\n\t// \tschemaDefaults?.imageFallback,\n\t// );\n\n\tconst { title: name, description, image, dateModified, datePublished } = automap(autoMap, seo, extra);\n\n\treturn {\n\t\t\"@context\": \"https://schema.org\",\n\t\t\"@type\": \"ContactPage\",\n\t\tname: coalesce(name, extra?.name),\n\t\tdescription: coalesce(description, extra?.description),\n\t\turl: coalesce(seo.canonicalUrl, extra?.url),\n\t\timage,\n\t\tinLanguage:\n\t\t\t(extra?.inLanguage as string | undefined) || defaults.inLanguage,\n\t\tdatePublished: (extra?.datePublished || extra?._createdAt) as\n\t\t\t| string\n\t\t\t| undefined,\n\t\tdateModified: (extra?.dateModified || extra?._updatedAt) as\n\t\t\t| string\n\t\t\t| undefined,\n\t\tisPartOf: seo.canonicalUrl\n\t\t\t? {\n\t\t\t\t\t\"@type\": \"WebSite\",\n\t\t\t\t\t\"@id\": `${seo.canonicalUrl}#website`,\n\t\t\t\t}\n\t\t\t: undefined,\n\t};\n}\n","// schema/compose.ts\nimport {\n\tbuildWebPage,\n\tbuildArticle,\n\tbuildProduct,\n\tbuildEvent,\n\tbuildFAQPage,\n\tbuildWebSite,\n\tbuildOrganization,\n\tbuildPersonOrOrg,\n\tbuildAboutPage,\n\tbuildContactPage,\n} from \"./builders\";\nimport type { MergedMetadata } from \"../utils/merge\";\nimport type {\n\tSchemaImage,\n\tSchemaOrganization,\n\tSchemaPerson,\n\tSchemaSearchAction,\n\tSchemaAddress,\n\tSchemaGeo,\n\tSchemaAggregateRating,\n} from \"./types\";\nimport type { Thing } from \"schema-dts\";\n\nexport type SchemaDefaults = {\n\tsameAs?: string[];\n\tlogo?: SchemaImage; // Global logo fallback\n\torganization?: SchemaOrganization;\n\tpublisher?: SchemaOrganization;\n\timageFallback?: SchemaImage;\n\timageFieldMapping?: string[];\n\tautoMap?: {\n\t\ttitle?: boolean;\n\t\tdescription?: boolean;\n\t\timage?: boolean;\n\t\tdates?: boolean;\n\t\tauthors?: boolean;\n\t};\n\twebSite?: {\n\t\tname?: string;\n\t\tpublisher?: SchemaOrganization;\n\t\tsearchAction?: SchemaSearchAction;\n\t};\n\twebPage?: {\n\t\tinLanguage?: string;\n\t\tprimaryImageOfPage?: SchemaImage;\n\t};\n\tarticle?: {\n\t\tpublisher?: SchemaOrganization;\n\t\tsection?: string;\n\t};\n\tproduct?: {\n\t\tbrand?: SchemaOrganization;\n\t\tpriceCurrency?: string;\n\t\tavailability?: string;\n\t};\n\tevent?: {\n\t\teventAttendanceMode?: string;\n\t\torganizer?: SchemaOrganization | SchemaPerson;\n\t};\n\tlocalBusiness?: {\n\t\tpriceRange?: string;\n\t\taddress?: SchemaAddress;\n\t\tgeo?: SchemaGeo;\n\t\taggregateRating?: SchemaAggregateRating;\n\t};\n\trendering?: {\n\t\tmultiLocaleStrategy?: string;\n\t};\n};\n\n/**\n * Composes the complete schema markup for a page\n * Returns an array of schema objects to be rendered as JSON-LD\n *\n * Entities with @id (Person, Organization) are output as full schemas first,\n * then referenced by @id in other schemas for cleaner markup.\n */\n\ninterface ComposeSchemaProps {\n\tseo: MergedMetadata;\n\tschemaDefaults?: SchemaDefaults;\n\ttype?: string;\n\textra?: Record<string, unknown>;\n\tisHomepage?: boolean;\n}\n\nexport function composeSchema({\n\tseo,\n\tschemaDefaults,\n\ttype = \"WebPage\",\n\textra,\n\tisHomepage = false,\n}: ComposeSchemaProps): Thing[] {\n\tconst schemas: Thing[] = [];\n\tconst entities = new Set<string>(); // Track entities we've already added\n\n\t// Extract base URL from seo data\n\tconst baseUrl = seo.canonicalUrl || \"\";\n\n\n\t// Helper to add entity schemas (Person, Organization) with @id\n\tconst addEntity = (entity: unknown, buildFn: (e: unknown) => unknown) => {\n\t\tif (!entity) return;\n\t\tconst schema = buildFn(entity) as Record<string, unknown>;\n\t\tif (schema?.[\"@id\"] && !entities.has(schema[\"@id\"] as string)) {\n\t\t\tentities.add(schema[\"@id\"] as string);\n\t\t\tschemas.push(schema as unknown as Thing);\n\t\t}\n\t};\n\n\t// Helper to recursively add organization and all its departments\n\tconst addOrgWithDepartments = (org: SchemaOrganization) => {\n\t\t// Apply global logo fallback if organization doesn't have a logo\n\t\tconst orgWithDefaults = {\n\t\t\t...org,\n\t\t\tlogo: org.logo || schemaDefaults?.logo,\n\t\t};\n\n\t\t// Add the organization itself\n\t\taddEntity(orgWithDefaults, (o) =>\n\t\t\tbuildOrganization(o as SchemaOrganization, schemaDefaults, baseUrl),\n\t\t);\n\n\t\t// Recursively add all departments\n\t\tif (org.department && Array.isArray(org.department)) {\n\t\t\tfor (const dept of org.department) {\n\t\t\t\taddOrgWithDepartments(dept);\n\t\t\t}\n\t\t}\n\t};\n\n\t// Add Organization entities first (can be referenced by others)\n\tif (schemaDefaults?.organization) {\n\t\taddOrgWithDepartments(schemaDefaults.organization);\n\t}\n\n\tif (\n\t\tschemaDefaults?.publisher &&\n\t\tschemaDefaults.publisher !== schemaDefaults.organization\n\t) {\n\t\taddOrgWithDepartments(schemaDefaults.publisher);\n\t}\n\n\t// Add Person entities from extra data (e.g., authors, contributors)\n\tif (extra?.author && Array.isArray(extra.author)) {\n\t\tfor (const author of extra.author) {\n\t\t\tif (author && typeof author === \"object\" && \"name\" in author) {\n\t\t\t\taddEntity(author, (person) =>\n\t\t\t\t\tbuildPersonOrOrg(\n\t\t\t\t\t\tperson as SchemaPerson | SchemaOrganization,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tbaseUrl,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (extra?.contributor && Array.isArray(extra.contributor)) {\n\t\tfor (const contributor of extra.contributor) {\n\t\t\tif (\n\t\t\t\tcontributor &&\n\t\t\t\ttypeof contributor === \"object\" &&\n\t\t\t\t\"name\" in contributor\n\t\t\t) {\n\t\t\t\taddEntity(contributor, (person) =>\n\t\t\t\t\tbuildPersonOrOrg(\n\t\t\t\t\t\tperson as SchemaPerson | SchemaOrganization,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tbaseUrl,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (extra?.organizer && Array.isArray(extra.organizer)) {\n\t\tfor (const organizer of extra.organizer) {\n\t\t\tif (organizer && typeof organizer === \"object\" && \"name\" in organizer) {\n\t\t\t\t// Apply logo fallback for organizations\n\t\t\t\tconst entityWithDefaults =\n\t\t\t\t\t\"jobTitle\" in organizer\n\t\t\t\t\t\t? organizer\n\t\t\t\t\t\t: { ...organizer, logo: organizer.logo || schemaDefaults?.logo };\n\t\t\t\taddEntity(entityWithDefaults, (entity) =>\n\t\t\t\t\tbuildPersonOrOrg(\n\t\t\t\t\t\tentity as SchemaPerson | SchemaOrganization,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tbaseUrl,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (extra?.performer && Array.isArray(extra.performer)) {\n\t\tfor (const performer of extra.performer) {\n\t\t\tif (performer && typeof performer === \"object\" && \"name\" in performer) {\n\t\t\t\t// Apply logo fallback for organizations\n\t\t\t\tconst entityWithDefaults =\n\t\t\t\t\t\"jobTitle\" in performer\n\t\t\t\t\t\t? performer\n\t\t\t\t\t\t: { ...performer, logo: performer.logo || schemaDefaults?.logo };\n\t\t\t\taddEntity(entityWithDefaults, (entity) =>\n\t\t\t\t\tbuildPersonOrOrg(\n\t\t\t\t\t\tentity as SchemaPerson | SchemaOrganization,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tbaseUrl,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Add brand from product schema (including its departments)\n\tif (\n\t\textra?.brand &&\n\t\ttypeof extra.brand === \"object\" &&\n\t\t\"name\" in extra.brand\n\t) {\n\t\taddOrgWithDepartments(extra.brand as SchemaOrganization);\n\t}\n\n\t// Always include WebSite if defaults provided, or automatically generate for homepage\n\tif (schemaDefaults?.webSite || isHomepage) {\n\t\tschemas.push(\n\t\t\tbuildWebSite({\n\t\t\t\t...(schemaDefaults?.webSite || {}),\n\t\t\t\tname: seo.siteTitle,\n\t\t\t\turl: seo.canonicalUrl,\n\t\t\t\tpublisher:\n\t\t\t\t\tschemaDefaults?.webSite?.publisher ||\n\t\t\t\t\tschemaDefaults?.publisher ||\n\t\t\t\t\tschemaDefaults?.organization,\n\t\t\t\tsearchAction: schemaDefaults?.webSite?.searchAction,\n\t\t\t}) as unknown as Thing,\n\t\t);\n\t}\n\n\tconst builders = {\n\t\tArticle: buildArticle,\n\t\tProduct: buildProduct,\n\t\tEvent: buildEvent,\n\t\tFAQPage: buildFAQPage,\n\t\tWebPage: buildWebPage,\n\t\tAboutPage: buildAboutPage,\n\t\tContactPage: buildContactPage,\n\t};\n\n\tif (builders[type as keyof typeof builders]) {\n\t\tschemas.push(\n\t\t\tbuilders[type as keyof typeof builders]({\n\t\t\t\tseo,\n\t\t\t\tschemaDefaults,\n\t\t\t\textra, // this is fine, it just needs a good type to know what data you can roll down its pipeline and have it use\n\t\t\t}) as unknown as Thing,\n\t\t);\n\t}\n\n\treturn schemas.filter(Boolean) as Thing[];\n}\n","import type { Thing } from \"schema-dts\";\nimport { getConfig, setConfig } from \"./config\";\nimport { composeSchema, type SchemaDefaults } from \"./schema-markup\";\nimport {\n\ttype MergedMetadata,\n\tmergeSeoData,\n\ttype PageMetadata,\n\ttype SeoDefaults,\n} from \"./utils/merge\";\n\nexport type BuildSeoPayloadParams = {\n\tglobalSeoDefaults?: SeoDefaults;\n\tschemaDefaults?: SchemaDefaults;\n\tpageMetadata?: PageMetadata;\n\tpageSchemaType?: string;\n\tseoFieldName?: string;\n\textraSchemaData?: Record<string, unknown>;\n\tisHomepage?: boolean;\n\tprojectId: string;\n\tdataset: string;\n};\n\nexport type BuildSeoPayloadResult = {\n\tmeta: MergedMetadata;\n\tschemas: Thing[] | undefined;\n};\n\n/**\n * Builds the complete SEO payload for a page\n * Merges global defaults with page-specific metadata\n */\nexport function buildSeoPayload({\n\tpageMetadata,\n\tglobalSeoDefaults,\n\tschemaDefaults,\n\tpageSchemaType = \"WebPage\",\n\tseoFieldName = \"metadata\",\n\tisHomepage = false,\n\textraSchemaData,\n\tprojectId,\n\tdataset,\n}: BuildSeoPayloadParams): BuildSeoPayloadResult {\n\tif (!projectId || !dataset) {\n\t\tconsole.warn(\n\t\t\t\"No projectId or dataset provided to buildSeoPayload, favicons and image Objects will not be created\",\n\t\t);\n\t}\n\n\tsetConfig({ projectId, dataset });\n\n\t// Merge SEO data: page metadata overrides global defaults\n\tconst merged = mergeSeoData(\n\t\tpageMetadata,\n\t\tglobalSeoDefaults,\n\t\tseoFieldName as any,\n\t);\n\n\t// Compose schema markup if defaults are provided\n\tconst schemas = schemaDefaults\n\t\t? composeSchema({\n\t\t\t\tseo: merged,\n\t\t\t\tschemaDefaults,\n\t\t\t\ttype: pageSchemaType || \"WebPage\",\n\t\t\t\textra: extraSchemaData,\n\t\t\t\tisHomepage,\n\t\t\t})\n\t\t: undefined;\n\n\treturn {\n\t\tmeta: merged,\n\t\tschemas,\n\t};\n}\n"]}